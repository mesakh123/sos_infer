version: '3.1'

services:

  db:
    container_name: postgresql_db
    image: postgres
    restart: always
    ports:
      - ${DB_PORT}:5432
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks: 
      - app_network
    volumes:
      - ./postgres-data:/var/lib/postgresql/data:rw


  pg_admin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    restart: always
    ports:
      - 5050:80
    depends_on:
      - db
    networks: 
      - app_network


  app1:
    container_name: sos_infer_api_1
    image: sos_infer_api
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./.env
    ports:
      - 9000:9000
    restart: always
    depends_on:
      - pg_admin
      - db
    networks: 
      - app_network
    volumes:
      - ./backend:/backend

  
  app2:
    container_name: sos_infer_api_2
    image: sos_infer_api
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./.env
    ports:
      - 9001:9000
    restart: always
    depends_on:
      - pg_admin
      - db
    networks: 
      - app_network
    volumes:
      - ./backend:/backend


  nginx:
    build: 
      context : ./nginx
      dockerfile: Dockerfile.multi
    ports:
      - 80:80
    depends_on:
      - app1
      - app2
    networks: 
      - app_network
    restart: always



networks:
  app_network:
    driver: bridge
#  adminer:
#    image: adminer
#    restart: always
#    ports:
#     - 9898:8080
